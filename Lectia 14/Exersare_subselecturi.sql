--aa) Să se scrie interogarea care va afișa pentru fiecare an de naștere numărul de studenți--
SELECT YEAR(DATA_NASTERII) AS ANUL_NASTERII,
	(SELECT COUNT(*) FROM STUDENT SSS WHERE YEAR(SSS.DATA_NASTERII) = YEAR(S.DATA_NASTERII) ) AS NR_STUD
FROM STUDENT S
GROUP BY YEAR(DATA_NASTERII)

--SA SE GASEASCA STUDENTUL CU CEA MAI MARE MEDIE--
WITH TEMP AS
(
	SELECT NN.STUDENT_ID, CONCAT(NUME, ' ', PRENUME) AS NPP, CONVERT(DECIMAL(3,2), AVG(NOTA)) AS NOTA_MEDIE FROM STUDENT SSS
																		INNER JOIN NOTA NN ON NN.STUDENT_ID = SSS.STUDENT_ID

	GROUP BY NN.STUDENT_ID, CONCAT(NUME, ' ', PRENUME) 
) 

SELECT * FROM TEMP
WHERE NOTA_MEDIE = ( SELECT MAX(NOTA_MEDIE) FROM TEMP )
	
--1) Sa se gaseasca toti angajatii ce activeaza in Criuleni si primesc un salariu mai mic decat salariul mediu--
WITH TEMP AS
(
	SELECT A.ANGAJAT_ID, CONCAT(NUME, ' ', PRENUME) AS NPP, R.DENUMIRE, SUM(SALARIU) AS SUMA_SALARIU
												    FROM ANGAJAT AN 
												    INNER JOIN LOC_STR LS ON LS.LOC_STR_ID = AN.LOC_STR_ID
												    INNER JOIN LOCALITATE L ON L.LOCALITATE_ID = LS.LOCALITATE_ID
												    INNER JOIN RAION R ON R.RAION_ID = L.RAION_ID
												    INNER JOIN ANGAJARE A ON A.ANGAJAT_ID = AN.ANGAJAT_ID
	GROUP BY A.ANGAJAT_ID, CONCAT(NUME, ' ', PRENUME), R.DENUMIRE
)

SELECT * FROM TEMP
WHERE TEMP.DENUMIRE = 'CRIULENI' AND SUMA_SALARIU < ( SELECT AVG(SUMA_SALARIU) FROM TEMP)

--6) Scrie o interogare pentru a obtine datele angajatului (FNP, data angajarii, functie) ce nu activeaza ca programator--
--   in Chisinau--

--1 METODA--
WITH TEMP AS
(
	SELECT AN.ANGAJAT_ID, CONCAT(NUME, ' ', PRENUME) AS NPP, DATA_ANGAJARII, DENUMIRE_FUNCTIE, R.DENUMIRE
																   FROM ANGAJAT AN
																   INNER JOIN LOC_STR LS ON LS.LOC_STR_ID = AN.LOC_STR_ID
																   INNER JOIN LOCALITATE L ON L.LOCALITATE_ID = LS.LOCALITATE_ID
																   INNER JOIN RAION R ON R.RAION_ID = L.RAION_ID
																   INNER JOIN ANGAJARE A ON A.ANGAJAT_ID = AN.ANGAJAT_ID
																   INNER JOIN FUNCTIE F ON F.FUNCTIE_ID = A.FUNCTIE_ID
	WHERE R.DENUMIRE != 'CRIULENI'
)

SELECT * FROM TEMP 
WHERE TEMP.DENUMIRE_FUNCTIE != 'PROGRAMATOR' 

--2 METODA--
WITH TEMP AS
(
	SELECT AN.ANGAJAT_ID, CONCAT(NUME, ' ', PRENUME) AS NPP, DATA_ANGAJARII, DENUMIRE_FUNCTIE, R.DENUMIRE
																   FROM ANGAJAT AN
																   INNER JOIN LOC_STR LS ON LS.LOC_STR_ID = AN.LOC_STR_ID
																   INNER JOIN LOCALITATE L ON L.LOCALITATE_ID = LS.LOCALITATE_ID
																   INNER JOIN RAION R ON R.RAION_ID = L.RAION_ID
																   INNER JOIN ANGAJARE A ON A.ANGAJAT_ID = AN.ANGAJAT_ID
																   INNER JOIN FUNCTIE F ON F.FUNCTIE_ID = A.FUNCTIE_ID
)

SELECT * FROM TEMP 
WHERE TEMP.DENUMIRE_FUNCTIE != 'PROGRAMATOR' 
GROUP BY TEMP.DENUMIRE, TEMP.ANGAJAT_ID, TEMP.NPP, TEMP.DATA_ANGAJARII, TEMP.DENUMIRE, TEMP.DENUMIRE_FUNCTIE
HAVING (SELECT COUNT(*) FROM 
(
	SELECT R.DENUMIRE FROM RAION R
	INNER JOIN LOCALITATE L ON L.RAION_ID = R.RAION_ID
	INNER JOIN LOC_STR LS ON LS.LOCALITATE_ID = L.LOCALITATE_ID
    INNER JOIN ANGAJAT ANN ON ANN.LOC_STR_ID = LS.LOC_STR_ID
	WHERE R.DENUMIRE = 'CRIULENI' AND ANN.ANGAJAT_ID = TEMP.ANGAJAT_ID
	GROUP BY R.DENUMIRE
) TT ) = 0


